# 코딩, 창조, 혁신: AI로 내일을 설계하는 혁명가들
- 패널토론: 이경록(테디노트), 클레어 백(깃허브), 문지호(카카오 선물하기 프론트엔드 개발자)

네, 안녕하십니까. 네, 서울 메타 위크 패널 토크 세션에 함께 해주신 여러분 반갑습니다.

저는 유튜브 테디노트 채널을 운영하고 있고요, 그리고 AI 교육과 개발에 정말 진심인 테디노트 운영하고 있는 이경록입니다.

오늘 잘 부탁드리겠습니다.

오늘 이 자리에 멋진 패널 두 분이랑 함께 하게 되었는데요. 먼저 클레어님부터 간단하게 자기소개 부탁드릴게요.

어.

안녕하세요.

이미 토크를 해서 아시겠지만 저는 마이크로소프트의...

쿠앤텀 연구인 팀에서 스태프, 스태프 매니저로 일하고 있는 클레어 백입니다.

음.

지환 님 어 자기소개 간단히 부탁드릴게요

아 네, 저 안녕하세요.

저는 어 카카오에서 선물하기라는 서비스를 개발하고 있는 시니어 프런트엔드 엔지니어 문지호라고 합니다. 반갑습니다.

오늘 이렇게 두 분과 멋진 디스커션을 진행해 볼 예정입니다.

제가 사전에 좀 요즘에 핫한 주제들을 모아서 질문으로 만들어봤거든요.

아마 여러분들께서도 굉장히 공감하는 내용이라고 생각이 듭니다

어, 그래서 제가 이제 번갈아 가면서 질문을 드리면 차례대로 답변해 주시면 정말 감사드리겠습니다.

어,

먼저 클레어님께 좀 여쭤보고 싶어요

요즘 GitHub에서 GitHub Copilot이 너무나도 핫한 것 같습니다.

GitHub Copilot과 같은 코딩 어시스턴트가 요즘에 굉장히 핫한 주제인데요, 기업 내에 적극 도입하고 있는지 혹은 이와 같은 코딩 어시스턴트 이후에 개발자들이 개발하는 방식에 생긴 변화라고 할까요?

이런 것에 대해서 의견 주시면 정말 감사드리겠습니다.

제가 아까 했던 토크가 그걸 대부분 커버한 내용이긴 한데, 다시 들으셔야겠지만, 저희는 아무래도 회사 자체에선 개발을 하는 게 코딩 시스템이 다르다 보니까요. 회사 내에서도.

내부에서도 적극적으로 쓰려고 많이.

격려 증가.

하고 있습니다. 어... 하지만 우리가 도입을 할 때 좀 챌린지가 있어서 어... 엔지니어마다 개개인마다 사실 우리는 노력을 많이 해서 어... 어떻게 하면 AI를 활용하고 쓸 수 있을까?

어... 항상 매니지먼트 쪽에서는 이제 그 부분을 전략을 많이 짜는 편이고요

어... 코딩 대회 펀드로는 어... 아까 말씀드렸다시피 어... 뭐 당연히 그 매니저마다 어떻게 도입하느냐에 따라 이제 어... 효과가 다르겠지만 특히.

어... 주니어 엔지니어분들이 굉장히 많이 어... 효과를 보고 있어요

그래서 시니어가 할 수 있는 태스크도 이제 시니어가 많이 하고, 그리고 LLM으로 배우는 것도 아주 빨라져서 저희는 아주 유용하게 활용하고 있습니다.

AI 툴을 쓰고 있습니다.

아, 그러세요. 그러면 이어서 지원님께도 한번 동일한 질문을 드려보고 싶은데요.

카카오에서는 어떤 움직임을 보이고 있는지 좀 부탁드립니다.

네 일단 저희 회사 같은 경우에도 AI를 되게 적극적으로 지원을 해주고 있고 도입을 하고 있는 추세예요. 그래서.

어 적극 도입을 하고 있고, 그럼 개발 방식의 큰 틀은 저는 실무 레벨에서는 아직 저희한테는 변하진 않았거든요.

저희가 이제 어 저희 팀원님들 보면은 뭐 라이브 코딩이 이제 되게 유행하다 보니까 주말이나 이럴 때 퇴근시간 이후에 여가 시간을 이용해서 되게 뭔가 자신의 생산성을 올릴 수 있는 도구들을 라이브 코딩을 되게 많이 하시거든요

이 과정에서는 어?

개발 방식이 많이 바뀌긴 했죠

뭐 기획하는 것부터 AI랑 같이 하고 테스크를 짜면서 개발하는 것도 이제 AI가 위주로 해주면서 개발자가 검토하는 방식으로 어 진행을 하고 있는데요

이런 방식으로만 봤을 때는 개발 방식이 어 개발자 위주가 아닌 이제 AI가 리드한 형태로 좀 바뀌었다고 볼 수 있을 것 같은데 실무를 할 때는 어 이거를 완전히 적용하기가 좀 힘들었어요

그 이유는 저희.

서비스도 이제 10년 이상 운영을 하고 그 되게 커머스 시장이다 보니까 되게 빠른 주기로 계속해서 기능들이 바뀌고, 그러다 보니까 10년 이상 쌓인 기획서가 굉장히 많아요.

그래서 이런 모든 컨텍스트를 이제 AI에게 주는 것에 대해서 좀 과도기적인 부분에 있어서 어, 이 부분을 완전히 AI에게 좀.

위임하는 데는 좀 어려움이 있고요. 그.

대신에 이제 개발 방식이 어느 정도 개발자가 이제 이끌고 있지만 그 안에서 세부적인 것을 보면은 좀 다르긴 한 것 같아요.

예전에는 이제 구글링을 했지만 요즘은 이제 거의 다 AI 챗봇에 검색을 하고 있고요. 그리고 뭐 코드 제안 같은 부분도 요즘은 코딩 어시스턴트가 제안을 해주잖아요. 그러다 보니까 뭐 복잡.

부분에 리팩토링이나 아니면은 그.

도메인 지식이나 그렇게 복잡하게 얽히지 않는 비즈니스 로직 이런 부분은 AI에게 많은 부분을 좀 위임을 하고 있습니다

저희도 이제 어 궁극적으로는 AI가 리드할 수 있는 형태로 지향을 하고 있습니다. 네.

답변 감사합니다. 대본에 없는 질문을 좀 드려보고 싶은데요, 지금 만약에 원래 개발자가 AI 이전에 그냥 백엔드의 업무를 다 했다고 가정을 해볼게요.

백엔드 중에 지금은 한 얼마 정도를.

AI가 좀 대신 도와주고 있다

한 몇 % 정도라고 생각하세요 지원님께서는?

알겠지?

개발할 때는 그래도 한 꽤 많은 영역을 차지하는데, 그냥 50% 정도? 제가 이거를 막 그렇게 곰곰히 생각해 본 적 없거든요.

근데 그냥 산업 생산성이나 간단한 MVP를 만들 때는 정말 많은 부분을 AI한테 이제 위임이 되는데, 실무 레벨에서 아직 저희가 좀 과도기적인 부분도 있어서...

그 개발 상세 내용을 개발할...

구현하는 데 있어서는 이제 AI 툴의 도입도 많이 이루어지고 있기 때문에 한 50% 정도로 말씀드려보겠습니다.

클레어는 어떻게 생각하세요?

저도 이제는 그전에는 30% 정도 했을 것 같은데

어?

우리는 새로운 피처가 나올 때마다 우리 회사의 개발자를 대상으로 그 피처를 테스트를 하기 때문에 어 그럴 때마다 더 이제 어 좀 올라가는 것 같아요

그래서 지금은 거의 한 어 fifty.

50%.

정도?

그 정도 이제 AI를 많이 쓰는 것 같아요.

지금 저희 개발자들이 되게 무서워하는 게 이게 AI가 나온지 얼마 안 됐는데 벌써 60%라고 말씀해 주신 것 자체가 되게 놀라운 수치라고 저는 생각이 들거든요. 이 부분에.

대해서 제가 조금 있다가 다시 한번 또 질문을 드려보겠습니다.

지금 AI를 사용하면 GPT를 대신해 주고 있다

두 분 다 비슷하게 말씀을 해주셨는데요

그러면 우리가 바꿔 말하면 개발자의 생산성이 올라갔다

이렇게 볼 수도 있을 것 같아요.

어, 그러면 각각의 개발팀에서 어떤 적정 규모, 그러니까 원래 사람이 10명이 필요했으면 지금 5명이서 동일한 일을 할 수 있다

이렇게 해석해 볼 수가 있을 것 같은데.

그 규모를 줄이려는 변화나 아니면 AI 도입 이후에 뭐 사람을 더 뽑는다든지 이런 변화들이 있으신지? 먼저 지호 님께 여쭤보고 싶습니다.

네, 어 일단 제가 느끼는 체감으로는 뭐 저희 규모나 구성이 줄어들지는 않고 있어요.

이게 뭐? 국내에는 조금 더 과도기적인 측면이 있어서 그럴 수 있는데 아직은 누군가는 이제 AI를 잘 활용하는 사람도 있고 아직은 조금 변화에 조금 뒤처져서 어 활용을 잘 못하시는 분들도 있을 수 있어요. 그러다 보니까 이.

이 조직 자체의 성과를 보여주려면 좀 가시적인 성과가 있어야 되는데 그 부분을 좀 보여주는 게 시간이 좀 걸릴 수 있다고 생각하거든요.

각 개인마다 잘 활용하는 사람은 본인의 성과가 늘고 본인의 생산성이 엄청 늘었다는 것은 알겠지만,

조직 레벨에서 어쨌든 가시적 성과를 보여주는 데는 좀 시간이 걸릴 것 같아서 저희는 아직 AI 도입으로 인한 영향은 없다

오히려 저희는 일이 계속 많이 더 몰려오는 상황이어서 사실 최근에는 어... 사람을 오히려 더 지금 뽑으려고도 하고 있어요.

네, 클레어는 어떻게 생각하세요?

대통령도 처음에 그런 걱정들이 많았는데 이게 쓴다고 해서 AI가 개발자를 대체하는 거는 아니에요.

이게 할 수 있는 영역이 많아지고 수요가 커진 것뿐이지

어, 10명이 필요했는데 이제 5명이 필요하다는 건 전혀 아닌 것 같고요

더구나 AI가 썼을 때 그것을 리뷰하고 밸리데이션을 하는 게 굉장히 시간 많이 걸려요

그래서 개발자를 줄인다는 것은 어렵죠?

우리에게 효율적이지 않고요. 그리고 이제 우리가 매 분기마다 헤드카운트 하는데 몇 명이 이제 필요하고 그런 걸 다 하는데요.

좀 찾고 있는 스킬셋이 달라진 것 뿐이지, 적게 뽑자

이건 아니고 지금도 저희 팀에서 2명 뽑고 있거든요.

그래서 이제 필요한 부분은 오히려 AI 쪽은 더구나 이제 플랫폼이나 인프라 쪽은 또 많이 뽑아요

왜냐하면 요새는 뭐 파이프라인을 많이 하는데 프로덕션 레벨로 어 데려가려면 인프라 쪽이 있어야 되는데 그것도 다 클라우드 서비스 엔진이 해야 되잖아요

그래서 저는 어 제가 보기에는 개발자를 적게 뽑고 줄이고 그거는 아직.

없는 것 같습니다.

아, 답변 감사합니다.

답변 감사합니다 그럼

다음 주제도 한번 여쭤보고 싶은데요. 개발자들은 이제 개발을 하고 나서 거기서 끝이 아니라 코드 리뷰하는 과정이 반드시 필요할 것 같습니다.

왜냐하면 이제 보안이나 뭐 여러 가지 이유에 따라서 품질 관리를 위해서 코드 리뷰하는 과정이 굉장히 중요하다고 볼 수가 있는데요.

이 리뷰하는 과정에 AI가 많이 개입하죠.

추세인지, 아니면 만약에 그렇다라고 한다면 AI는...

리뷰에 개입을 할 때 어떤 방식으로 하고 있는지, 어, 사람의 리뷰를 앞으로 점진적으로 대체해서 완전하게 대체할 수도 있을 거라고 생각하시는지 의견이 궁금합니다.

먼저 Klaire한테 여쭤보고 싶은데요

저는 어...

AI가 하는 경우는 우리는 좀 적고요. 오히려 반대로 Copilot을 통해서 이제는 기업 이슈에다가 아이디어만 넣으면 밥 먹고 오면 코드가 쫙 있고, 그렇기 때문에 엔지니어들이 리뷰를 많이 하죠.

AI에 있는 코드 리뷰를 맡기지 않습니다

어? 그리고 AI.

AI의 한계가 아직 많아요

그래서 AI가 코드 미디어하고 우리가 그것을 좋아한다는 것은 아직은 그 정도까지는 아닌 것 같고요.

그리고 어... 2번째 질문이 뭐였죠?

사람이 아까 리뷰를 완전히 대체할 수 있는지?

여쭤보신 그것까지는 아직 좀 많이 시간이 남았다고 생각을 합니다

저 최근에도 GitHub Copilot 그 어사인해서 정말 잘 쓰고 있거든요

근데 제가 100% 공감하고 있는 부분은 뭐냐면 뭔가

얘가 이제 더 이상 나를 리뷰 안 해도 되게끔 만들어준다

이런 느낌이라기보다는 어?

나도 리뷰를 하겠지만 얘도 같이 리뷰를 해서 내가 놓치는 것들을 뭔가 잡아주고 도와주는 그런 역할을 한다는 점에서 굉장히 유용하게 잘 쓰고 있는 것 같습니다.

지원님께도 한번 여쭤보고 싶은데요.

어.

동일한 질문인데 코드 리뷰 과정에서 혹시 AI 도구를 쓰고 계신지, 만약에 개입을 하고 있다면 어떻게 활용하고 계신지와 마지막으로 사람의 리뷰를 얼만큼 대체할 수 있는지 이런 의견이 궁금합니다.

네, 일단 조직.

조직에서는 코드 리뷰 자립 코드리뷰 툴이 있어요

AI가 이제 붙은 코드 리뷰 툴이 있어서 이것을 계속 시범적으로 적용을 해보고 그리고 의견을 청취해서 떼보기도 하고 이런 과정을 겪고 있거든요

근데 저희 조직에서 나왔던 얘기는 AI가 이제 일차적인 리뷰를 해주는 데는 되게 괜찮다, 도움이 된다 이런.

얘기들을 하거든요. 왜냐하면 개발.

자가 그런 일차적인 뭐 코드 스멜이 있거나 아니면 뭐 좀 보안 이슈가 있거나 뭐 이런 것들을 개발자가 일일이 캐치해서 그 작업한 사람이랑 커뮤니케이션을 하는 것보다

AI가 일차적으로 그런 것들을 캐치해서 개발자로 하여금 스스로 먼저 고치게 하면 리뷰를 하는 입장에서도 좀 더 비용이 줄어들고 조금 더 편하게 할 수 있거든요

그래서 이런 점이 좋은 점이라고 다들 생각을 하는데 저희가.

쓰면서 조금 불편했던 점 중에 하나가 개발자들이 이제 명확한 의도를 갖고 작성한 코드들이 있어요.

근데 이런 것들에 대해서도 이제 오히려 역제안, 뭐 다른 제안들을 해주기도 해요.

그래가지고 이런 비즈니스 로직의 타당성에 대한 다른 제안을 해주거나 하는 부분에 있어서 오히려 개발자들에게 지금 좀 혼란을 일으키고 있다.

노이즈가 되는 포인트들도 좀 있다. 그러다 보니까.

음.

계속 시범적으로 도입을 해보는 것 같아요.

이번에 도입해 보고 껐다가, 아 좀 시간이 지나서 AI가 조금 더 발전했으니까 이번에 한번 도입해 보고 꺼보자

이런 식으로 좀 운영을 해보고 있습니다. 그리고 어... 저도.

클레어가 말씀하신 것처럼 리뷰를 사실 대체한다고는 하긴 좀 어렵다고 할 수 없다라고 생각을 하고, AI가 할 수 있는 코드 리뷰는 일차적인 리뷰를 맡기는 게 좀 효율적이고 그리고.

최종 리뷰는 개발자가 하는 게 좀 확실히...

맞는 방향인 것 같아요.

어쨌든 저희가 시간이 지나면서 AI에게 점점 위임할 코드들이 많아질 수 있는데, 그러다 보면 저희가 자연스럽게 리뷰하는 일의 비중도 되게 커지게 될 거예요.

근데 그 과정에서 저희만의 도메인 지식이 필요한 그런 부분들을 캐치해야 될 수도 있고, 혹은 뭐 윤리적 문제가 없거나 보안 이슈가 없거나 혹은...

성능적으로 좀.

문제가 없거나 이런 것들은, 그리고 혹은 뭐 그런 것도 있을 수 있겠죠.

결국 지시하는 사람이 개발자가 되면 자연스럽게 질문을 하게 되면 AI가 의도를 다르게 파악해서 작성할 수도 있는 거잖아요

그래서 이런 과정에서 사실 100퍼센트의 정답을 완전히 기대할 수는 없기 때문에 인간 개발

리뷰와 논의 과정이 꼭 필요하다고 생각합니다.

네, 좋은 내용 감사합니다.

이제 다음 질문으로 한번 넘어가 보려고 하는데요.

다음 질문은 사실 너무나 기대되는 질문이에요.

어 사실 제가 주변 사람들한테 많이 물어보는 질문이거든요.

요즘에 사람들이 AI 도구들 막 쏟아져 나오잖아요.

그리고 Erdam도 막 계속 경쟁하면서 많이 모델들이 나오는 것 같습니다

AI를 잘

활용하는 개발자가 있으신 것 같아요

잘 따라가고 계신 개발자 그리고 이 도구를 잘 활용하시는 개발자가 있고 그렇지 않은 개발자가 있는 것 같은데 그 두 명 간의 성과 차이가 실제로 존재하는지 궁금합니다

먼저 클레어.

아 확실히 있죠. 어... 뭐 어떻게 쓰냐

아니면은 뭐 어 엔지니어마다 어 다르긴 하지만 근데 이제 전반적으로 보면은 어 확실히 차이가 많이 나요

음, 아까 말씀드렸듯이 이제 좀 어... 러닝커브가.

파싱 속도가 굉장히 빨라졌다고 말씀드렸잖아요

어?

그래서 컨퍼런스로 다시 이제 어시스턴트를 쓰는 친구들은 뉴 랭귀지를 할 때 그때 할 수 있는 정도의 포텐셜이 굉장히 크고요, 태스크도 빨리빨리 백업하고. 꼬리가 길게 오래 보는 게 이제 fine-tuned 하면 보는데, AI 쓰는 친구들은 확실히 fine-tuned 웨이트가 훨씬 적은 것 같아요

어, 그리고 이제.

어.

코드 베이스에 우리가 아까 말씀드렸는데 머널리 새로 개발하는 거는 마이크로소프트로 가는데 어 거기 컨텍스트를 이제 어 자기가 메뉴를 보면서 이해를 하려고 하는 어 개발자가 있고, AI 매니저가 쿠바에서 통해가지고 어 디펜던스를 생각하지 못했던 걸 다 보고 어?

그런 식으로 적극적으로 활용하는 친구들은 확실히 이제 빨라요.

그리고 아웃풋도 많고 그런 걸 보면서 아, 제대로 활용하는 사람들은...

확실히 생산성에 성과가 좋구요

근데 하지만 이게 잘못 쓰게 되면 오히려 어... 예를 들어 조금 이 어... 익스피리언스가 적은 친구들은 어... 코드를 다시 리팩토링하고 리뷰하고 그런데 시간의 소비가 많이 걸려요

그렇기 때문에 어떻게 쓰고 누가 쓰냐에 따라 좀 더 많이 달라지긴 하는데요.

이렇게 많이 전반적으로 보면은 AI를 쓰는 사람들이 성과가 많이 나오는.

걸로 보고 있습니다.

지원님은 혹시 어떻게 생각하세요?

그 질문이 적극 활용됐나요?

그러면 잘 활용하는 개발자가 있고 쓰긴 쓰는데 이제 필수적인 도구만 쓰는 사람이 있다고 이렇게 질문을 조금 바꿔보겠습니다

잘 활용하는 케이스가 있어요

일단 적극적으로 활용을 하는 케이스는 사실 아까 말씀 클레어가 해주셨다시피.

잘 활용하는 게 중요해요

잘못하면 사실 이 코드를 어쨌든 프로덕트에 이제 내놔야 되는데.

되게 잠재적인 위험성이 있다고 생각하기 때문에 오히려 안 쓰는 사람만 못할 수도 있다고 생각을 하거든요.

그래서 일단 전제는 잘 활용해야 된다라는 전제가 깔려야 된다고 보고, 잘 활용한다라는 가정이 있을 때 저희 조직 내에서도 지금 뭐 올해 초부터 이제 되게 이게 좀 핫해진 것 같아요. 그래서.

되게 눈에 보이지 않는 성과 차이들이 보이거든요.

이제 이게 1년을 다 쌓아서 좀.

종합적으로 보면 더 잘 보일 것 같은데 지금 제가 보기만 해도 AI를 적극적으로 활용하고 공부하는 사람은 매주 이제 저희도 주간회의를 하게 되는데 그 과정에서도 더 많은 정말 좋은 제안들을 많이 해주시고 그리고 더 많은 생산성을 올릴 수 있는 그런 제안도 해주시고 그러다 보니까 아무래도 AI를 적극적으로 잘.

활용하시는 분들의 생산성이 좀 높아질 수밖에 없고 이게 성과로 이어질 수밖에 없다라고 생각을 해요

코드를 작성하는 부분에 있어서도 아무래도 AI한테 어느 부분을 잘 위임할지, 이거를 뭐 각자 프로젝트 서비스 환경마다 다르겠지만 이런 영역들을 잘 구분하면서 AI를 잘 활용하면 본인이 또 그 나무가 아닌 숲을 볼 수 있는 기회가 또 있거든요

더 창의적인 걸 할 수 있고 그 시간에 그래서 그.

같은 시간 동안에 더 할 수 있는 게 많아지기 때문에.

음.

성과 차이는 무조건 존재하고 아마 AI...

AI로 학습을 하시는 분들은?

이제 안 쓰는 분들과 그 학습의 격차가 되게 벌어지잖아요

그래서 저는 이거 시간이 지날수록 더 가시화가 잘 될 것 같아요.

네, 감사합니다.

근데 제가 대본에 없는 또 추가 질문 하나 드려보고 싶은데요.

사실 누구나가 여기 계신 분들 다 AI 도구 다 잘 쓰고 싶은 마음은 같을 것입니다

근데 잘 쓰기 위한 노력들을 현장에서 어떻게 하고 계신지? 예를 들어서 스터디가 될 수도 있고 아니면 팔로우하는 Reddit이나 이런 것들이 있을 수 있는데 혹시 그런 것들이 공유가 가능하실까요?

어 저희 같은 경우에는 저희는 이제 뭐 GitHub Copilot이 최근 너무 핫하잖아요

그래서 저희도 이 발전하는 그 기술의 흐름에 맞춰서 따라가야 되기 때문에 스터디를 하고 있어요. 회사 내에서 스터디를 하고 있고 그 스터디를 할 때 각자 본인이 주제를 정해서 AI 어떻게 잘 활용할지 이런 것들을 인사이트를 공유하는 시간을.

갖거든요.

그래서 뭐 주말이나 퇴근 시간 이후에?

여가 시간에 좀 이제 공부를 해가지고 그런 것들을 서로 공유하면서 체크하는 시간을 가져요.

그래서 본인은 이렇게 생각을 했는데 뭐 다른 분들은 이런 의견에 대해서 어떻게 생각하는지

그래서 서로 '아, 궁극적으로 이런 방향이 좀 괜찮은 것 같다'

이런 식으로 또 저희는 계속 생각을 해보려고 노력을 하고 있어요

그리고 뭐 YouTube나 이런 좀 먼저 앞서나가는 분들이 어떻게?

쓰시는지 이런 것들도 이제 보면서 같이 공유하고 이게 실무적응이 잘 될 수 있는지 이런 것들도 공유하곤 합니다.

아 네, 감사합니다. 결과도 너무 궁금한데요.

일단 궁금한 거는 해외에서도 우리나라...

에서는 이 스터디 문화가 굉장히 잘 되어있거든요

그러니까 공유하고, 왜냐하면 우리 조직이 다 같이 잘 돼야 되니까 나만 알아서는 그게 조직에 적용이 되기 어려우니까 기업에서는 그런 분위기가 있는지도 좀 궁금하고, 만약에 AI 툴을 잘 활용하기 위한 어떤 내부 스터디랄지 아니면 그렇지 않다면 그걸 잘 활용하는 개발자들은 도대체.

그 친구들은 어떻게 잘 활용하게 됐는지 그런 것들이 좀 궁금합니다.

어.

먼저 미국은 내부 스토리 같은 거는 잘 안하고 개인이 하고 싶은 거, 내 시간을 내가 알아서 한다는 게 크기 때문에 그런 게 있으면 참 좋긴 할 텐데

북클럽 이런 거는 있어요

어.

같은 책 읽고 토론하고 그런 거 있는데 어, 스토리 클럽 같은 거는 많이 어, 없어요

근데 이게 어 미국 문화에서 다른 게 어 이게?

회사 내에서 우리 우리 회사를 어?

여러 얘기를 하면은 어?

여기 한 사람, 매니저는 굉장히 많이 저희가 토론을 해요

그래서 AI도 어떻게 쓸 거냐 했을 때 어... 뭐 제가 조금 더 다른 매니저들보다 더 가는 건 있어요

사실 저는 제 팀은 너무나 아끼기 때문에, 그래서 한 사람 한 사람 앉혀 놓고 AI로 안 놔둬요.

어떻게 쓸 건지 이렇게 다 짜와요.

그래서 이 사람을 개발을 했을 때 제가 가장 먼저 하는 일은 AI를 가장 굉장히 잘 쓴 케이스의 베스트 프랙티스를 평소에 공유를 하는 거예요

그렇게 하면 어 이거를 어?

너는 부서도 이렇게 쓸 수 있어

그러면 이 사람의.

그 메이저가 그 사람의 아웃풋이라고 생각을 하거든요

그런 식으로 하면은 이제 다른 엔지니어들을 보면서 '어, 저 생각을 못 했는데' 그러면서 이제 코드를 보면서 따라해보고 그런 식으로 많이 배우죠.

음.

그리고 다른 하나는 이제 우리가 어... 뭐 평가할 때 넣기라고 하기는 좀 그런데 이제 6개월마다 엔지니어 리뷰레이션을 해요

그중에서 그전에는 이제 뭐?

테크니컬한 거랑 이제 리더십, 그리고 커뮤니케이션 이런 걸 좀 많이 봤는데요?

이제는 AI를 어떻게 쓰는가

그리고 그 뉴스를 통해서 비즈니스 임팩트가 뭐였는가를 이제 우리가 넣었어요.

그.

어 그걸 가지고 이 사람이 일 못한다.

그런 걸 정하는 건 아니지만 이제 오디션으로, 한 이제 딜러 포인트로 넣기 시작을 했어요

그 뒤로부터는 이제 조금 더 적극적으로 엔지니어들이 어 어떻게 쓸 수 있을까 고민을 좀 많이 하더라고요

그래서 어... 저는 근데 그렇게 생각해요

회사 내에서 이렇게 AI를 잘 쓰게 하려면 그 팀 내에...

서포터가 있어야지 잘 쓸 수 있다고 믿는 상황이기 때문에요.

예, 그 매니저의 역할이 굉장히 크다고 생각합니다.

네, 너무 감사합니다.

또 이렇게 기업의 어떤 분위기를 들어볼 수 있는 시간이 없기 때문에 수정 의견 감사드리고요.

그럼 다음 주제로 또 넘어가 볼게요.

아, 이것도 많은 개발자들이 지금 법규를 걱정하는 그런 내용인데 AI가 개발자를 대체할 것이라고 생각하시는지, 아니면 오히려 개발자들에게 기회라고 생각하시는지요?

이걸 여쭤보고 싶은데 먼저 지환 님부터 답변해 주시면 감사드리겠습니다

네, 일단 AI가 뭐 대체한다라고 하기에는 좀 지금 보이는 한계도 명확하고 그래서 대체하기는 힘들다고 보거든요. 이제 앞.

학생들도 좀 말씀을 드렸는데 어쨌든 시간이 지날수록 AI가 고도화되고 저희도 이제 AI를 더 잘 쓰는 법들을 알게 되면서 AI가 작성하는 코드들이 많아질 거예요

어쨌든 저희는 결과적으로 뭔가

그 리뷰를 하는 역할에 많이 갈 것 같고 잘 지시하고 잘 리뷰하고 이런.

인간이 잘하는 것과 AI가 잘하는 것 이런 것들이 상호보완적인 관계로 나아가지 않을까 싶어요

그래서 앞서 말씀드렸다시피 리뷰나 뭐 이런 지식, 이런 것도 인간이 더 잘하는 부분, 도메인 지식 기반으로 문제를 해결할 수 있거나 뭐 윤리적인 문제가 없는지 이런 것들을 캐치하거나 혹은 다른 직군들이 있으면 다른 직군 간의 커.

이런 좀 유동적인, 감성적인 그런 것들은 또 더 잘할 수 있기 때문에 여전히 필요.

하다고 보고 대체되기는 어렵다고 생각하고 있어요.

감사합니다.

클레어 님은 어떻게 생각하세요?

그런 얘기 기사 많이 나오는데 저는 아직은 멀었다는 생각이에요.

아까도 말씀드렸지만 어떤 AI든 헛소리할 때가 좀 많아요.

어.

그렇기 때문에 어 그 오류를 잡아줄려면은 결국은 AI도 데이터거든요

데이터를 어떻게 가지고 트레이닝을 하느냐에 따라서 답변이 달라지는 것이기 때문에 어, 그것을 아예 휴먼 디버거를 대체할 수는 없다고 생각을 합니다

어.

그리고 보면요. 우리가 뭐 프로덕트 스펙을 썼을 때 뭐 마켓 리서치나 이런 게 다 quantitative analysis가 있지만 qualitative analysis일 수도 있단 말이에요. 그.

부분 AI가 어떻게 다 그걸 어 이해를 하고 그걸 프로덕트 개발을 해서 코드를 짜고 그런 것까지 다 한다는 건지 저는 솔직히 이해가 잘 안 가고 어? 그래서 오히려 이제 AI 더 깊어질수록 우리가 항상 생각하는 게 어?

다들 코드를 배워야 된다

그렇게 생각을 하지

AI가 대체를 할 거다

그렇게는 오히려 접근하지는 않습니다.

저는 앞으로 몇 년 정도 더 일할 수 있을까요?

안 했어요.

감사합니다. 네, 그러면.

다음 질문으로 넘어가 볼게요.

어.

아, 저도 이런 경험이 있습니다.

요즘에 주니어 개발자들이 ChatGPT 이후에 이제 개발 공부를 시작한 개발자들이 흔히 저에게 이제 와서 얘기하는 게 'ChatGPT가 이렇게 코드를 짜줘서 그렇게 했다'라는 질문들을 많이 합니다.

어, AI가 제안하는 코드의 깊이를 이해하지 않고 사용하는 개발자들이 굉장히 많이 늘어나고 있는 것 같아요.

이런 현상들을 어떻게 바라보시는지 먼저 클레어님부터 부탁드립니다.

어 우리 엔지니어들이 그래요 아.

많이 맞나요? 많이 많이 혼나고 어, '왜 이렇게 짰어?' 그러면은 어 '코파일럿이 알려줬다고'.

그 자랑스럽게 또 얘기해요.

네.

그 자신감으로 이력서를 보냈더니 아 자기가 읽어봤대요

된대.

그래서 무슨 일 데리고 와서 '어디가 안될 거야' 하면은 '아, 안 썼어'

얘 또 이렇게 조용히 가서 또 열심히 일하고 어?

사실 저는.

저는 굉장히 위험한 거라고 생각을 해요.

어 예전에 비전공자였어요

예전에 비상공자였어요

회계사로 일을 하다가 이제 컴퓨터 엔지니어링으로 바꾼 케이스인데 그때는 AI가 없었어요

그래서 정말 눈물 흘리면서 공부했거든요

어, 그때 AI가 나왔으면 정말 눈물 덜 흘리고 공부했을 수 있었을 텐데 그 생각을 하면서도 어, 지금 친구들 보면은 어, 펀더멘탈이 굉장히 약한 걸 보고서 아.

이게 AI가 좋으면서도 위험한 거구나

어, 저는 코딩 리뷰도 안 하고 그냥 뭐 다 썼다고 뭘 쓸려

그런 경우가 워킹 익스피리언스를 통해서 코스메틱 스킬도 있고 해야 되는데, 그게 부족하기 때문에 이제 조금 더 힘들어.

진짜 것 뿐이지, 그게 AI가 대체로 사람을 안 뽑는 건 아니거든요

그래서 네, 그 현상은 아주 위험하다고 저는 생각합니다.

지원님은 어떻게 생각하세요? 네.

일단 깊이 이해하지 않는다는 것 자체가 사실 저희 쪽 서비스를 생각해 보면 좀 상상도 못할 일이네요.

하거든요.

왜냐하면 코드를 깊이 이해 안 하고 이 서비스를 유저한테 내놓는다는 거는 굉장히 잠재적인 위험성을 두고 배포를 하는 거예요. 그러다 보니까 일단 저는 실무의 일환으로 개발자들은 어쨌든 이 코드에 대한 책임이 있어야 된다고 생각을 해요.

그랬을 때 AI가 이런 작성한 코드들을 깊이 이해하지 않고 뭐?

풀 리퀘스트를 올리거나 이런 부분은 굉장히 문제가 많이 될 소지가 있다라고 생각을 해요.

이런 부분이 좀 문제가 될 수 있는 게 일단은 본인의 성장에도 좋지가 않거든요.

이게 어쨌든

또 점점 저희가 리뷰하는 입장이 될 거라고 했는데 AI가 시간이 지나면서 더 고도화되면 저희도 그거에 맞춰서 수준을 높여가야 된다고 생각을 해요

그래서 더 많은 학습량이 요구될 수도 있는데, 그 과정에서 뭔가 애초에 깊이 이해하는 법들을 잘 모르고 이렇게 일을 해오면 소프트웨어적인 그런 기본기, 펀더멘털들이 무너지기 때문에 그런.

부분에 있어서.

좀 위험한 현상이 아닌가 싶습니다.

감사합니다.

네, 두 분의 의견 잘 들어봤구요

이제 몇 개 질문이 안 남았습니다

이제 점점 막바지로 가는데 사실 마지막에 꼭 드리고 싶은 질문은 이것 같아요

AI가 결국에는 개발자의 일부 영역을 대체하는 건 맞는 것 같습니다.

어, 그런데 내가 대체되면 안 되겠죠.

저는 대체되기 싫거든요.

저희가 대체되지 않기 위해서 앞으로 개발자들은 어떤 역량을 더 키우면 좋겠는지 생각하시는지? 지원 님부터 답변 부탁드립니다.

일단은 AI 시대가 와도 기존의 좋은 개발자에 대한 특성을 깔고 가야 된다고 생각을 해요.

뭐 문제 해결 능력이나 적극적으로 학습 의지가 있다거나 소프트웨어 설계 능력이 있다던가 커뮤니케이션하는 그런 스킬들은 여전히 필요하다고 생각을 하고, AI 시대 이후에 이제 변하는 거라면 아무래도 AI를.

잘 활용하는 게 잘 활용하지 못하는 사람보다 더...

큰 차이가 있기 때문에 이 부분.

이 부분이 되게 중요한 것 같고, '대체될 수 없는 개발자의 핵심 역량', 그래서 이런 역량들을 잘 갖춰야 된다고 생각해요.

일단은 AI를 잘 활용할 수 있는 역량도 중요하고 아까도 계속 반복해서 말하지만 결국에는 AI에게 많은 코드를 위임하고 저희가 이제 뭐 지시를 할.

수도 있고 리뷰를 할 수도 있는 역할이 올 텐데.

이런 것들을 리뷰하기 위해서 저희의 그런 소프트웨어적인 펀더멘탈, 그런 기본기 이런 것들은 여전히 핵심 역량이라고 생각을 하고 있습니다.

그러면 제가 갑자기 또 돌발 질문 하나 드려보면, 만약에 지금 당장 후배를 뽑습니다. 뽑는데 신입 개발자의 여러 역량들이 있는데, 어떤 역량들이 이 친구와 같이 일하고 싶다에 결정적인 요소가 될 것 같은지 한 몇 가지만 말씀해 주셔도 좋습니다.

일단 좀 기본기 있는 사람, 뭔가 코드를 깊이 이해하려고 하고 그러한.

AI가 짜증 나서 그냥 막 막 쓰려고 하거나 이런 것들은 좀 아닌 것 같고요.

AI를 잘 활용하려는 그런 모습도 보이면서 아, 이 사람의 소프트웨어를 대하는 태도, 이런 기본기들 이런 것을 봤을 때 그런 것들이 아마 좋은 포인트로 여겨지지 않을까라는 생각을 합니다. 감사합니다.

한번 이렇게 여쭤보고 싶은데요.

코드도 게다가 실제로 인터뷰도 정말 많이 하실 테니까 아마 더 잘 답변해 주실 수 있을 거라고 생각이 드는데요?

AI가 먼저 절대 대체할 수 없는 개발자만의 앞으로의 핵심 역량은 뭐라고 생각하시는지 궁금합니다.

코드에 대한 이해, 코드의 중요성은 많이 얘기했으니까 그건 스킵할게요

어 좀 두 가지라고 생각을 하는데 하나는.

어.

의외로 엔지니어들의 그 비즈니스 아큐먼.

이 프로젝트가 될까, 마켓에서 그런 생각이 되게 중요해요.

이게 제품 매니저의 일이라고 생각을 하는데요

아니요, Product Manager들은 볼 수 있는 시야가 은근히 좁아요

근데 어... 개발자들이 더 어...

알려주는 개발자만의 또 시각이 있어요

내가 어떤 개발을 하냐

예를 들면 쿠폰으로 예를 들게요

든 매니저가 '이게 어떻게 도움이 될까, 마켓에서 어떤 포텐셜이 있을까'

그렇게 했는데 음... 뭐 AI 코딩 툴이다, 코딩을 도와준다

그 정도일 수도 있지만 하지만 개발자 입장에서 보면은 어?

컴퍼지션 퀄리티가 중요하고 유저 익스피리언스는 이래야 되고 어 더 많은 인사이트를 줄 수가 있어요

그래서 비즈니스 acumen이 되게 중요하고요. 어, 그리고 아주 정말 더 중요한 거는 어 아키텍처를.

아, 시스템을 만들 때 어떻게 만들 건지 AI한테 물어본다고 그게 되는 게 아니거든요

어떤 상황에서 그냥 데이터베이스는 어떤, 그니까 테이블에 어떻게 나눠야 수도하면 되는 건지, 어떤 Kafka를 써야 되는 건지 아니면 스케일링은 어떻게 할 것인지 그런 것부터 시작해서 다 생각을 하셔야 되는데 그런 아키텍처에서 인터뷰.

인터뷰 보면은 아주 많이 떨어집니다.

요새 어 다들 그냥 말꼬리만 잡으시는 것 같아요

그래서 이제 인터뷰할 때 아키텍처가 우리는

뭐 요새는 그런 거 있잖아요

인터뷰할 때 뭐 AI를 통해서 코딩을 도와주는 뭐 그런 거 나오잖아요

아키텍처 어...마운드 해보면요 거기서 다 떨어져요

보이듯이 다 떨어져요

그렇기 때문에 그 아키텍처를 어떻게, 어떤 시스템을 스케일 업을 하게 하고 어떤 걸 스케일하게 만들 건지.

그리고 디플로이를 할 때 뭐 프로덕션 맵은 디플로이할 때 어떠냐?

어떤 천 명의 애플리케이션은 나중에 1만 명이 쓸 걸 어떻게 스케일을 할 건지 그거부터 생각을 하셔야 될 것 같아요

그게 정말 중요하다고 생각합니다.

네 감사합니다. 그 아키텍처에 대한 중요성도 요즘에는 시니어 개발자분들께서 정말 많이 강조해 주셔서 이 AI 코딩 시대에도 요즘에 국내에서 많이 강조가 되고 있는 것 같은데, 사실 아까 비즈니스 마인드 같은 경우에도 중요하다라고 생각이 들지만 저는 굉장히 놀랐던 게 국내 개발자 컨퍼런스에서 비즈니스 마인드에 대한 내용을 크게 잘 다루지 않고 뭔가 성...

고도화 측면, 효율화, 아키텍처 이런 부분들, 기술적인 내용들을 주로 많이 다루는 것 같아요.

근데 제가 지난달에 실리콘밸리에 해커톤을 가거나 했을 때 거기 개발자들은 다 비즈니스적인 고민들을 많이 하는 걸 보고 나서 되게 많은 충격을 받았었거든요.

그래서 그 부분에 대해서 언급해 주셔서 굉장히 놀랐습니다.

네, 이제 어... 보면 어... 스타트업 보면 폴더.

게임 없이 그 founder 두 명에서 뭐 co-founder 두 명에서 엔지니어였던 사람들이 시작한 경우가 정말 많아요

그 이유가 있거든요.

그래서 비즈니스 아카데미가 더 중요하고 나중에 파운더가 매니저를 프로덕트 파트너로 뽑는 경우가 많죠.

그런데 약간 이런 것들이 있는 것 같아요.

약간 개발자한테 그런 비즈니스적인 고민을 요구를 하면은 '어, 나는 개발을 하기 위해서 여기에 온 거지'

뭐 비즈니스적인 걸 고민하기 위해서 온 건 아니다

이렇게 좀 반감을 가지는 개발자들은 혹시 없나요? 아 네.

네, 잘 알겠습니다. 네.

그러면 이제 마지막 질문, 머리속이 하얘지네요.

갑자기 네, 마지막 질문을 드려보면 딱 맞을 것 같습니다.

네, 마지막으로 사실 저희가 고민하고 있는 게 AI 개발 속도가 너무 빠른 것 같아요.

앞으로 이 발전 속도, AI 기술의 발전 속도를 봤을 때 개발 업계가 앞으로 어떻게 변화할 것인가?

개발자의 어떤 개발 문화도 좋고요

아니면 전반적으로 생각하시는 다양한 방향으로 얘기해 주시면 너무 감사드리겠습니다

지우님부터 먼저 부탁드릴게요

네, 저는 생각해 봤을 때 어... 개발 업계가 어떻게 변할 거라고 뭐 엄청 예측은 할 수 없겠지만 제가 봤을 때 제가 속한 조직에서는 되게 분업화가 잘 돼있거든요.

기획자, 디자이너, 프론트 엔지니어 중에서도 웹 퍼?

있고 이런 식으로 분업화가 되게 잘 되어있는데 AI가 되게 발전을 많이 하면서 저희도 이제 요구되는 학습량이 많아질 거라고 이제 앞서 말씀을 드렸잖아요. 그러다 보니까 그.

그런 고민이 들었어요.

이게 제가 프론트엔드의 그 지금 고도화된 일하기에도 뭔가 바쁠 수도 있는데 내가 기획자랑 디자인까지 이걸 다 할 수 있을까

저희가 지금 그 서비스 유저한테

어쨌든 최고의 기획자들과 최고의 디자이너들과 최고의 앱 퍼블리셔들과 다 이제 각 직군마다의 스페셜리스트들이랑 함께 하는 거거든요

근데 이게 AI를 통해서 더 많은 부분을 커버할 수 있다고 하지만 이게 최소 기반 지식이라는 게 좀 한정이 될 것 같아요

이게 뭐 기획자, 디자이너 이런 쪽으로도.

커버하려면 그 전문성에 대해서도 사실 최소 기반이 되는 지식이 되게 요구되는 게 많을 거란 말이에요. 근데 사실.

그런 것들을 다 챙기는 것보다는, 그런 것들을 두루두루 하는 것보다는 각 직군에서의 스페셜리스트들이 더 역량을 키워서 AI를 핸들링하는 방식으로 가지 않을까 싶습니다.

감사합니다.

어.

마지막으로 클레어에게 질문드리고 싶은데 같은 질문인데요

AI 기술 발전 속도를 고려할 때 앞으로 이 개발 업계가 어떻게 변화할 것인지 궁금합니다.

이게 AI 기술이라 뭐 자고 일어나면 다시 또 새로운 일이 나오고, 그런데 가서는 이제 수익이나 애플리케이션을 하기는 되게 힘든 분야인 것 같아요

어 근데 어 말씀드렸듯이 약간...

AI가 뭐 신기술이 나오고 안 나오고를 떠나서요, 아까 말씀드린 진수가 있잖아요

어 AI 코딩도 끄고요. 그냥 프로젝트 열 개만 만들어 보시면은 그렇게 해서 엔지니어링 펀더멘털이 강하게 하시고, 그렇게 하는 게 정말 중요하지, 미래를 보고서 아, 이걸 보고 미리 해야겠다, 그거는 어 아직.

좀 서툰 것 같습니다.

네, 알겠습니다.

감사합니다.

어, 이렇게 해가지고 저희가 이제 패널 토크를 해봤는데 벌써 준비한 40분이라는 시간이 금방 지나갔습니다.

저희 들으셨는지 모르겠고요, 제가 오늘 질문을 뽑아올 때도 이렇게 두 분의 패널분들이 많이 고심을 해서 많은 분들께서 궁금하실 주제로 준비를 해봤습니다.

어, 이 시간이 좀 유의미한 시간이었으면 좋겠다라는 생각을 하면서 이렇게 마치도록 하겠습니다.

감사합니다.